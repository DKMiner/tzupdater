// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tz_ids_proto.proto

package com.android.timezone.tzids.proto;

public final class TzIdsProto {
  private TzIdsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TimeZoneIdsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.timezone.tzids.proto.TimeZoneIds)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return Whether the ianaVersion field is set.
     */
    boolean hasIanaVersion();
    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return The ianaVersion.
     */
    java.lang.String getIanaVersion();
    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return The bytes for ianaVersion.
     */
    com.google.protobuf.ByteString
        getIanaVersionBytes();

    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> 
        getCountryMappingsList();
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getCountryMappings(int index);
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    int getCountryMappingsCount();
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder> 
        getCountryMappingsOrBuilderList();
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder getCountryMappingsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Information about Olson IDs used / preferred by Android.
   * </pre>
   *
   * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneIds}
   */
  public static final class TimeZoneIds extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.timezone.tzids.proto.TimeZoneIds)
      TimeZoneIdsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimeZoneIds.newBuilder() to construct.
    private TimeZoneIds(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimeZoneIds() {
      ianaVersion_ = "";
      countryMappings_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimeZoneIds();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneIds_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.Builder.class);
    }

    private int bitField0_;
    public static final int IANAVERSION_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object ianaVersion_ = "";
    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return Whether the ianaVersion field is set.
     */
    @java.lang.Override
    public boolean hasIanaVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return The ianaVersion.
     */
    @java.lang.Override
    public java.lang.String getIanaVersion() {
      java.lang.Object ref = ianaVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ianaVersion_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The IANA TZDB version the data was generated from.
     * </pre>
     *
     * <code>optional string ianaVersion = 1;</code>
     * @return The bytes for ianaVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIanaVersionBytes() {
      java.lang.Object ref = ianaVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ianaVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COUNTRYMAPPINGS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> countryMappings_;
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> getCountryMappingsList() {
      return countryMappings_;
    }
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder> 
        getCountryMappingsOrBuilderList() {
      return countryMappings_;
    }
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    @java.lang.Override
    public int getCountryMappingsCount() {
      return countryMappings_.size();
    }
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getCountryMappings(int index) {
      return countryMappings_.get(index);
    }
    /**
     * <pre>
     * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder getCountryMappingsOrBuilder(
        int index) {
      return countryMappings_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getCountryMappingsCount(); i++) {
        if (!getCountryMappings(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, ianaVersion_);
      }
      for (int i = 0; i < countryMappings_.size(); i++) {
        output.writeMessage(2, countryMappings_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, ianaVersion_);
      }
      for (int i = 0; i < countryMappings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, countryMappings_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds)) {
        return super.equals(obj);
      }
      com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds other = (com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds) obj;

      if (hasIanaVersion() != other.hasIanaVersion()) return false;
      if (hasIanaVersion()) {
        if (!getIanaVersion()
            .equals(other.getIanaVersion())) return false;
      }
      if (!getCountryMappingsList()
          .equals(other.getCountryMappingsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIanaVersion()) {
        hash = (37 * hash) + IANAVERSION_FIELD_NUMBER;
        hash = (53 * hash) + getIanaVersion().hashCode();
      }
      if (getCountryMappingsCount() > 0) {
        hash = (37 * hash) + COUNTRYMAPPINGS_FIELD_NUMBER;
        hash = (53 * hash) + getCountryMappingsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about Olson IDs used / preferred by Android.
     * </pre>
     *
     * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneIds}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.timezone.tzids.proto.TimeZoneIds)
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIdsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneIds_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.Builder.class);
      }

      // Construct using com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        ianaVersion_ = "";
        if (countryMappingsBuilder_ == null) {
          countryMappings_ = java.util.Collections.emptyList();
        } else {
          countryMappings_ = null;
          countryMappingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds getDefaultInstanceForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds build() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds buildPartial() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds result = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds result) {
        if (countryMappingsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            countryMappings_ = java.util.Collections.unmodifiableList(countryMappings_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.countryMappings_ = countryMappings_;
        } else {
          result.countryMappings_ = countryMappingsBuilder_.build();
        }
      }

      private void buildPartial0(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ianaVersion_ = ianaVersion_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds) {
          return mergeFrom((com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds other) {
        if (other == com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds.getDefaultInstance()) return this;
        if (other.hasIanaVersion()) {
          ianaVersion_ = other.ianaVersion_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (countryMappingsBuilder_ == null) {
          if (!other.countryMappings_.isEmpty()) {
            if (countryMappings_.isEmpty()) {
              countryMappings_ = other.countryMappings_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCountryMappingsIsMutable();
              countryMappings_.addAll(other.countryMappings_);
            }
            onChanged();
          }
        } else {
          if (!other.countryMappings_.isEmpty()) {
            if (countryMappingsBuilder_.isEmpty()) {
              countryMappingsBuilder_.dispose();
              countryMappingsBuilder_ = null;
              countryMappings_ = other.countryMappings_;
              bitField0_ = (bitField0_ & ~0x00000002);
              countryMappingsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCountryMappingsFieldBuilder() : null;
            } else {
              countryMappingsBuilder_.addAllMessages(other.countryMappings_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        for (int i = 0; i < getCountryMappingsCount(); i++) {
          if (!getCountryMappings(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                ianaVersion_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.android.timezone.tzids.proto.TzIdsProto.CountryMapping m =
                    input.readMessage(
                        com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.PARSER,
                        extensionRegistry);
                if (countryMappingsBuilder_ == null) {
                  ensureCountryMappingsIsMutable();
                  countryMappings_.add(m);
                } else {
                  countryMappingsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object ianaVersion_ = "";
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @return Whether the ianaVersion field is set.
       */
      public boolean hasIanaVersion() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @return The ianaVersion.
       */
      public java.lang.String getIanaVersion() {
        java.lang.Object ref = ianaVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            ianaVersion_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @return The bytes for ianaVersion.
       */
      public com.google.protobuf.ByteString
          getIanaVersionBytes() {
        java.lang.Object ref = ianaVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ianaVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @param value The ianaVersion to set.
       * @return This builder for chaining.
       */
      public Builder setIanaVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ianaVersion_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIanaVersion() {
        ianaVersion_ = getDefaultInstance().getIanaVersion();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB version the data was generated from.
       * </pre>
       *
       * <code>optional string ianaVersion = 1;</code>
       * @param value The bytes for ianaVersion to set.
       * @return This builder for chaining.
       */
      public Builder setIanaVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ianaVersion_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> countryMappings_ =
        java.util.Collections.emptyList();
      private void ensureCountryMappingsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          countryMappings_ = new java.util.ArrayList<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping>(countryMappings_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.CountryMapping, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder, com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder> countryMappingsBuilder_;

      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> getCountryMappingsList() {
        if (countryMappingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(countryMappings_);
        } else {
          return countryMappingsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public int getCountryMappingsCount() {
        if (countryMappingsBuilder_ == null) {
          return countryMappings_.size();
        } else {
          return countryMappingsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getCountryMappings(int index) {
        if (countryMappingsBuilder_ == null) {
          return countryMappings_.get(index);
        } else {
          return countryMappingsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder setCountryMappings(
          int index, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping value) {
        if (countryMappingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCountryMappingsIsMutable();
          countryMappings_.set(index, value);
          onChanged();
        } else {
          countryMappingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder setCountryMappings(
          int index, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder builderForValue) {
        if (countryMappingsBuilder_ == null) {
          ensureCountryMappingsIsMutable();
          countryMappings_.set(index, builderForValue.build());
          onChanged();
        } else {
          countryMappingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder addCountryMappings(com.android.timezone.tzids.proto.TzIdsProto.CountryMapping value) {
        if (countryMappingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCountryMappingsIsMutable();
          countryMappings_.add(value);
          onChanged();
        } else {
          countryMappingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder addCountryMappings(
          int index, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping value) {
        if (countryMappingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCountryMappingsIsMutable();
          countryMappings_.add(index, value);
          onChanged();
        } else {
          countryMappingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder addCountryMappings(
          com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder builderForValue) {
        if (countryMappingsBuilder_ == null) {
          ensureCountryMappingsIsMutable();
          countryMappings_.add(builderForValue.build());
          onChanged();
        } else {
          countryMappingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder addCountryMappings(
          int index, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder builderForValue) {
        if (countryMappingsBuilder_ == null) {
          ensureCountryMappingsIsMutable();
          countryMappings_.add(index, builderForValue.build());
          onChanged();
        } else {
          countryMappingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder addAllCountryMappings(
          java.lang.Iterable<? extends com.android.timezone.tzids.proto.TzIdsProto.CountryMapping> values) {
        if (countryMappingsBuilder_ == null) {
          ensureCountryMappingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, countryMappings_);
          onChanged();
        } else {
          countryMappingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder clearCountryMappings() {
        if (countryMappingsBuilder_ == null) {
          countryMappings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          countryMappingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public Builder removeCountryMappings(int index) {
        if (countryMappingsBuilder_ == null) {
          ensureCountryMappingsIsMutable();
          countryMappings_.remove(index);
          onChanged();
        } else {
          countryMappingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder getCountryMappingsBuilder(
          int index) {
        return getCountryMappingsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder getCountryMappingsOrBuilder(
          int index) {
        if (countryMappingsBuilder_ == null) {
          return countryMappings_.get(index);  } else {
          return countryMappingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder> 
           getCountryMappingsOrBuilderList() {
        if (countryMappingsBuilder_ != null) {
          return countryMappingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(countryMappings_);
        }
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder addCountryMappingsBuilder() {
        return getCountryMappingsFieldBuilder().addBuilder(
            com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.getDefaultInstance());
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder addCountryMappingsBuilder(
          int index) {
        return getCountryMappingsFieldBuilder().addBuilder(
            index, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.getDefaultInstance());
      }
      /**
       * <pre>
       * Information about IDs that are mapped to ISO 3166 Alpha-2 country codes.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.CountryMapping countryMappings = 2;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder> 
           getCountryMappingsBuilderList() {
        return getCountryMappingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.CountryMapping, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder, com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder> 
          getCountryMappingsFieldBuilder() {
        if (countryMappingsBuilder_ == null) {
          countryMappingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.timezone.tzids.proto.TzIdsProto.CountryMapping, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder, com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder>(
                  countryMappings_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          countryMappings_ = null;
        }
        return countryMappingsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.timezone.tzids.proto.TimeZoneIds)
    }

    // @@protoc_insertion_point(class_scope:com.android.timezone.tzids.proto.TimeZoneIds)
    private static final com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds();
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TimeZoneIds>
        PARSER = new com.google.protobuf.AbstractParser<TimeZoneIds>() {
      @java.lang.Override
      public TimeZoneIds parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimeZoneIds> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimeZoneIds> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneIds getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CountryMappingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.timezone.tzids.proto.CountryMapping)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return Whether the isoCode field is set.
     */
    boolean hasIsoCode();
    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return The isoCode.
     */
    java.lang.String getIsoCode();
    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return The bytes for isoCode.
     */
    com.google.protobuf.ByteString
        getIsoCodeBytes();

    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @return A list containing the timeZoneIds.
     */
    java.util.List<java.lang.String>
        getTimeZoneIdsList();
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @return The count of timeZoneIds.
     */
    int getTimeZoneIdsCount();
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @param index The index of the element to return.
     * @return The timeZoneIds at the given index.
     */
    java.lang.String getTimeZoneIds(int index);
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the timeZoneIds at the given index.
     */
    com.google.protobuf.ByteString
        getTimeZoneIdsBytes(int index);

    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> 
        getTimeZoneLinksList();
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getTimeZoneLinks(int index);
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    int getTimeZoneLinksCount();
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder> 
        getTimeZoneLinksOrBuilderList();
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder getTimeZoneLinksOrBuilder(
        int index);

    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> 
        getTimeZoneReplacementsList();
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getTimeZoneReplacements(int index);
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    int getTimeZoneReplacementsCount();
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder> 
        getTimeZoneReplacementsOrBuilderList();
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder getTimeZoneReplacementsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Information about Olson IDs recognized by Android as being related to a country.
   * </pre>
   *
   * Protobuf type {@code com.android.timezone.tzids.proto.CountryMapping}
   */
  public static final class CountryMapping extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.timezone.tzids.proto.CountryMapping)
      CountryMappingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CountryMapping.newBuilder() to construct.
    private CountryMapping(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CountryMapping() {
      isoCode_ = "";
      timeZoneIds_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      timeZoneLinks_ = java.util.Collections.emptyList();
      timeZoneReplacements_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CountryMapping();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_CountryMapping_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.class, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder.class);
    }

    private int bitField0_;
    public static final int ISOCODE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object isoCode_ = "";
    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return Whether the isoCode field is set.
     */
    @java.lang.Override
    public boolean hasIsoCode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return The isoCode.
     */
    @java.lang.Override
    public java.lang.String getIsoCode() {
      java.lang.Object ref = isoCode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          isoCode_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The ISO 3166 Alpha-2 country code.
     * </pre>
     *
     * <code>required string isoCode = 1;</code>
     * @return The bytes for isoCode.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIsoCodeBytes() {
      java.lang.Object ref = isoCode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        isoCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIMEZONEIDS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList timeZoneIds_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @return A list containing the timeZoneIds.
     */
    public com.google.protobuf.ProtocolStringList
        getTimeZoneIdsList() {
      return timeZoneIds_;
    }
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @return The count of timeZoneIds.
     */
    public int getTimeZoneIdsCount() {
      return timeZoneIds_.size();
    }
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @param index The index of the element to return.
     * @return The timeZoneIds at the given index.
     */
    public java.lang.String getTimeZoneIds(int index) {
      return timeZoneIds_.get(index);
    }
    /**
     * <pre>
     * The IANA TZDB Olson IDs preferred by Android for the country.
     * </pre>
     *
     * <code>repeated string timeZoneIds = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the timeZoneIds at the given index.
     */
    public com.google.protobuf.ByteString
        getTimeZoneIdsBytes(int index) {
      return timeZoneIds_.getByteString(index);
    }

    public static final int TIMEZONELINKS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> timeZoneLinks_;
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> getTimeZoneLinksList() {
      return timeZoneLinks_;
    }
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder> 
        getTimeZoneLinksOrBuilderList() {
      return timeZoneLinks_;
    }
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    @java.lang.Override
    public int getTimeZoneLinksCount() {
      return timeZoneLinks_.size();
    }
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getTimeZoneLinks(int index) {
      return timeZoneLinks_.get(index);
    }
    /**
     * <pre>
     * Links for time zones that are recognized as being for the country, but are not preferred.
     * These links are for time zones that have always been equivalent.
     * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder getTimeZoneLinksOrBuilder(
        int index) {
      return timeZoneLinks_.get(index);
    }

    public static final int TIMEZONEREPLACEMENTS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> timeZoneReplacements_;
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> getTimeZoneReplacementsList() {
      return timeZoneReplacements_;
    }
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder> 
        getTimeZoneReplacementsOrBuilderList() {
      return timeZoneReplacements_;
    }
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    @java.lang.Override
    public int getTimeZoneReplacementsCount() {
      return timeZoneReplacements_.size();
    }
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getTimeZoneReplacements(int index) {
      return timeZoneReplacements_.get(index);
    }
    /**
     * <pre>
     * Replacements for time zones where the replaced time zone is not identical to the replacement
     * before some point in time. After that point in time, the two zones have been judged as
     * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
     * 1974, so the two can be considered equivalent today, but not for dates before that.
     * </pre>
     *
     * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
     */
    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder getTimeZoneReplacementsOrBuilder(
        int index) {
      return timeZoneReplacements_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIsoCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTimeZoneLinksCount(); i++) {
        if (!getTimeZoneLinks(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTimeZoneReplacementsCount(); i++) {
        if (!getTimeZoneReplacements(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, isoCode_);
      }
      for (int i = 0; i < timeZoneIds_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, timeZoneIds_.getRaw(i));
      }
      for (int i = 0; i < timeZoneLinks_.size(); i++) {
        output.writeMessage(3, timeZoneLinks_.get(i));
      }
      for (int i = 0; i < timeZoneReplacements_.size(); i++) {
        output.writeMessage(4, timeZoneReplacements_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, isoCode_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timeZoneIds_.size(); i++) {
          dataSize += computeStringSizeNoTag(timeZoneIds_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTimeZoneIdsList().size();
      }
      for (int i = 0; i < timeZoneLinks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, timeZoneLinks_.get(i));
      }
      for (int i = 0; i < timeZoneReplacements_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, timeZoneReplacements_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.timezone.tzids.proto.TzIdsProto.CountryMapping)) {
        return super.equals(obj);
      }
      com.android.timezone.tzids.proto.TzIdsProto.CountryMapping other = (com.android.timezone.tzids.proto.TzIdsProto.CountryMapping) obj;

      if (hasIsoCode() != other.hasIsoCode()) return false;
      if (hasIsoCode()) {
        if (!getIsoCode()
            .equals(other.getIsoCode())) return false;
      }
      if (!getTimeZoneIdsList()
          .equals(other.getTimeZoneIdsList())) return false;
      if (!getTimeZoneLinksList()
          .equals(other.getTimeZoneLinksList())) return false;
      if (!getTimeZoneReplacementsList()
          .equals(other.getTimeZoneReplacementsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsoCode()) {
        hash = (37 * hash) + ISOCODE_FIELD_NUMBER;
        hash = (53 * hash) + getIsoCode().hashCode();
      }
      if (getTimeZoneIdsCount() > 0) {
        hash = (37 * hash) + TIMEZONEIDS_FIELD_NUMBER;
        hash = (53 * hash) + getTimeZoneIdsList().hashCode();
      }
      if (getTimeZoneLinksCount() > 0) {
        hash = (37 * hash) + TIMEZONELINKS_FIELD_NUMBER;
        hash = (53 * hash) + getTimeZoneLinksList().hashCode();
      }
      if (getTimeZoneReplacementsCount() > 0) {
        hash = (37 * hash) + TIMEZONEREPLACEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getTimeZoneReplacementsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.timezone.tzids.proto.TzIdsProto.CountryMapping prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about Olson IDs recognized by Android as being related to a country.
     * </pre>
     *
     * Protobuf type {@code com.android.timezone.tzids.proto.CountryMapping}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.timezone.tzids.proto.CountryMapping)
        com.android.timezone.tzids.proto.TzIdsProto.CountryMappingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_CountryMapping_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.class, com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.Builder.class);
      }

      // Construct using com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        isoCode_ = "";
        timeZoneIds_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        if (timeZoneLinksBuilder_ == null) {
          timeZoneLinks_ = java.util.Collections.emptyList();
        } else {
          timeZoneLinks_ = null;
          timeZoneLinksBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (timeZoneReplacementsBuilder_ == null) {
          timeZoneReplacements_ = java.util.Collections.emptyList();
        } else {
          timeZoneReplacements_ = null;
          timeZoneReplacementsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getDefaultInstanceForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping build() {
        com.android.timezone.tzids.proto.TzIdsProto.CountryMapping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping buildPartial() {
        com.android.timezone.tzids.proto.TzIdsProto.CountryMapping result = new com.android.timezone.tzids.proto.TzIdsProto.CountryMapping(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.android.timezone.tzids.proto.TzIdsProto.CountryMapping result) {
        if (timeZoneLinksBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            timeZoneLinks_ = java.util.Collections.unmodifiableList(timeZoneLinks_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.timeZoneLinks_ = timeZoneLinks_;
        } else {
          result.timeZoneLinks_ = timeZoneLinksBuilder_.build();
        }
        if (timeZoneReplacementsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            timeZoneReplacements_ = java.util.Collections.unmodifiableList(timeZoneReplacements_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.timeZoneReplacements_ = timeZoneReplacements_;
        } else {
          result.timeZoneReplacements_ = timeZoneReplacementsBuilder_.build();
        }
      }

      private void buildPartial0(com.android.timezone.tzids.proto.TzIdsProto.CountryMapping result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isoCode_ = isoCode_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          timeZoneIds_.makeImmutable();
          result.timeZoneIds_ = timeZoneIds_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.timezone.tzids.proto.TzIdsProto.CountryMapping) {
          return mergeFrom((com.android.timezone.tzids.proto.TzIdsProto.CountryMapping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.timezone.tzids.proto.TzIdsProto.CountryMapping other) {
        if (other == com.android.timezone.tzids.proto.TzIdsProto.CountryMapping.getDefaultInstance()) return this;
        if (other.hasIsoCode()) {
          isoCode_ = other.isoCode_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.timeZoneIds_.isEmpty()) {
          if (timeZoneIds_.isEmpty()) {
            timeZoneIds_ = other.timeZoneIds_;
            bitField0_ |= 0x00000002;
          } else {
            ensureTimeZoneIdsIsMutable();
            timeZoneIds_.addAll(other.timeZoneIds_);
          }
          onChanged();
        }
        if (timeZoneLinksBuilder_ == null) {
          if (!other.timeZoneLinks_.isEmpty()) {
            if (timeZoneLinks_.isEmpty()) {
              timeZoneLinks_ = other.timeZoneLinks_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTimeZoneLinksIsMutable();
              timeZoneLinks_.addAll(other.timeZoneLinks_);
            }
            onChanged();
          }
        } else {
          if (!other.timeZoneLinks_.isEmpty()) {
            if (timeZoneLinksBuilder_.isEmpty()) {
              timeZoneLinksBuilder_.dispose();
              timeZoneLinksBuilder_ = null;
              timeZoneLinks_ = other.timeZoneLinks_;
              bitField0_ = (bitField0_ & ~0x00000004);
              timeZoneLinksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeZoneLinksFieldBuilder() : null;
            } else {
              timeZoneLinksBuilder_.addAllMessages(other.timeZoneLinks_);
            }
          }
        }
        if (timeZoneReplacementsBuilder_ == null) {
          if (!other.timeZoneReplacements_.isEmpty()) {
            if (timeZoneReplacements_.isEmpty()) {
              timeZoneReplacements_ = other.timeZoneReplacements_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureTimeZoneReplacementsIsMutable();
              timeZoneReplacements_.addAll(other.timeZoneReplacements_);
            }
            onChanged();
          }
        } else {
          if (!other.timeZoneReplacements_.isEmpty()) {
            if (timeZoneReplacementsBuilder_.isEmpty()) {
              timeZoneReplacementsBuilder_.dispose();
              timeZoneReplacementsBuilder_ = null;
              timeZoneReplacements_ = other.timeZoneReplacements_;
              bitField0_ = (bitField0_ & ~0x00000008);
              timeZoneReplacementsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeZoneReplacementsFieldBuilder() : null;
            } else {
              timeZoneReplacementsBuilder_.addAllMessages(other.timeZoneReplacements_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasIsoCode()) {
          return false;
        }
        for (int i = 0; i < getTimeZoneLinksCount(); i++) {
          if (!getTimeZoneLinks(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTimeZoneReplacementsCount(); i++) {
          if (!getTimeZoneReplacements(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                isoCode_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureTimeZoneIdsIsMutable();
                timeZoneIds_.add(bs);
                break;
              } // case 18
              case 26: {
                com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink m =
                    input.readMessage(
                        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.PARSER,
                        extensionRegistry);
                if (timeZoneLinksBuilder_ == null) {
                  ensureTimeZoneLinksIsMutable();
                  timeZoneLinks_.add(m);
                } else {
                  timeZoneLinksBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement m =
                    input.readMessage(
                        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.PARSER,
                        extensionRegistry);
                if (timeZoneReplacementsBuilder_ == null) {
                  ensureTimeZoneReplacementsIsMutable();
                  timeZoneReplacements_.add(m);
                } else {
                  timeZoneReplacementsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object isoCode_ = "";
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @return Whether the isoCode field is set.
       */
      public boolean hasIsoCode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @return The isoCode.
       */
      public java.lang.String getIsoCode() {
        java.lang.Object ref = isoCode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            isoCode_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @return The bytes for isoCode.
       */
      public com.google.protobuf.ByteString
          getIsoCodeBytes() {
        java.lang.Object ref = isoCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          isoCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @param value The isoCode to set.
       * @return This builder for chaining.
       */
      public Builder setIsoCode(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        isoCode_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsoCode() {
        isoCode_ = getDefaultInstance().getIsoCode();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ISO 3166 Alpha-2 country code.
       * </pre>
       *
       * <code>required string isoCode = 1;</code>
       * @param value The bytes for isoCode to set.
       * @return This builder for chaining.
       */
      public Builder setIsoCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        isoCode_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList timeZoneIds_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureTimeZoneIdsIsMutable() {
        if (!timeZoneIds_.isModifiable()) {
          timeZoneIds_ = new com.google.protobuf.LazyStringArrayList(timeZoneIds_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @return A list containing the timeZoneIds.
       */
      public com.google.protobuf.ProtocolStringList
          getTimeZoneIdsList() {
        timeZoneIds_.makeImmutable();
        return timeZoneIds_;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @return The count of timeZoneIds.
       */
      public int getTimeZoneIdsCount() {
        return timeZoneIds_.size();
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param index The index of the element to return.
       * @return The timeZoneIds at the given index.
       */
      public java.lang.String getTimeZoneIds(int index) {
        return timeZoneIds_.get(index);
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the timeZoneIds at the given index.
       */
      public com.google.protobuf.ByteString
          getTimeZoneIdsBytes(int index) {
        return timeZoneIds_.getByteString(index);
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param index The index to set the value at.
       * @param value The timeZoneIds to set.
       * @return This builder for chaining.
       */
      public Builder setTimeZoneIds(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTimeZoneIdsIsMutable();
        timeZoneIds_.set(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param value The timeZoneIds to add.
       * @return This builder for chaining.
       */
      public Builder addTimeZoneIds(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTimeZoneIdsIsMutable();
        timeZoneIds_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param values The timeZoneIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllTimeZoneIds(
          java.lang.Iterable<java.lang.String> values) {
        ensureTimeZoneIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timeZoneIds_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeZoneIds() {
        timeZoneIds_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The IANA TZDB Olson IDs preferred by Android for the country.
       * </pre>
       *
       * <code>repeated string timeZoneIds = 2;</code>
       * @param value The bytes of the timeZoneIds to add.
       * @return This builder for chaining.
       */
      public Builder addTimeZoneIdsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTimeZoneIdsIsMutable();
        timeZoneIds_.add(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> timeZoneLinks_ =
        java.util.Collections.emptyList();
      private void ensureTimeZoneLinksIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          timeZoneLinks_ = new java.util.ArrayList<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink>(timeZoneLinks_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder> timeZoneLinksBuilder_;

      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> getTimeZoneLinksList() {
        if (timeZoneLinksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeZoneLinks_);
        } else {
          return timeZoneLinksBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public int getTimeZoneLinksCount() {
        if (timeZoneLinksBuilder_ == null) {
          return timeZoneLinks_.size();
        } else {
          return timeZoneLinksBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getTimeZoneLinks(int index) {
        if (timeZoneLinksBuilder_ == null) {
          return timeZoneLinks_.get(index);
        } else {
          return timeZoneLinksBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder setTimeZoneLinks(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink value) {
        if (timeZoneLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.set(index, value);
          onChanged();
        } else {
          timeZoneLinksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder setTimeZoneLinks(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder builderForValue) {
        if (timeZoneLinksBuilder_ == null) {
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeZoneLinksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder addTimeZoneLinks(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink value) {
        if (timeZoneLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.add(value);
          onChanged();
        } else {
          timeZoneLinksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder addTimeZoneLinks(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink value) {
        if (timeZoneLinksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.add(index, value);
          onChanged();
        } else {
          timeZoneLinksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder addTimeZoneLinks(
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder builderForValue) {
        if (timeZoneLinksBuilder_ == null) {
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.add(builderForValue.build());
          onChanged();
        } else {
          timeZoneLinksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder addTimeZoneLinks(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder builderForValue) {
        if (timeZoneLinksBuilder_ == null) {
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeZoneLinksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder addAllTimeZoneLinks(
          java.lang.Iterable<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink> values) {
        if (timeZoneLinksBuilder_ == null) {
          ensureTimeZoneLinksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeZoneLinks_);
          onChanged();
        } else {
          timeZoneLinksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder clearTimeZoneLinks() {
        if (timeZoneLinksBuilder_ == null) {
          timeZoneLinks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          timeZoneLinksBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public Builder removeTimeZoneLinks(int index) {
        if (timeZoneLinksBuilder_ == null) {
          ensureTimeZoneLinksIsMutable();
          timeZoneLinks_.remove(index);
          onChanged();
        } else {
          timeZoneLinksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder getTimeZoneLinksBuilder(
          int index) {
        return getTimeZoneLinksFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder getTimeZoneLinksOrBuilder(
          int index) {
        if (timeZoneLinksBuilder_ == null) {
          return timeZoneLinks_.get(index);  } else {
          return timeZoneLinksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder> 
           getTimeZoneLinksOrBuilderList() {
        if (timeZoneLinksBuilder_ != null) {
          return timeZoneLinksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeZoneLinks_);
        }
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder addTimeZoneLinksBuilder() {
        return getTimeZoneLinksFieldBuilder().addBuilder(
            com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.getDefaultInstance());
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder addTimeZoneLinksBuilder(
          int index) {
        return getTimeZoneLinksFieldBuilder().addBuilder(
            index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.getDefaultInstance());
      }
      /**
       * <pre>
       * Links for time zones that are recognized as being for the country, but are not preferred.
       * These links are for time zones that have always been equivalent.
       * e.g. "GB-Eire" is linked to "Europe/London" because "GB-Eire"" is just an obsoleted synonym.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneLink timeZoneLinks = 3;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder> 
           getTimeZoneLinksBuilderList() {
        return getTimeZoneLinksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder> 
          getTimeZoneLinksFieldBuilder() {
        if (timeZoneLinksBuilder_ == null) {
          timeZoneLinksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder>(
                  timeZoneLinks_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          timeZoneLinks_ = null;
        }
        return timeZoneLinksBuilder_;
      }

      private java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> timeZoneReplacements_ =
        java.util.Collections.emptyList();
      private void ensureTimeZoneReplacementsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          timeZoneReplacements_ = new java.util.ArrayList<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement>(timeZoneReplacements_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder> timeZoneReplacementsBuilder_;

      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> getTimeZoneReplacementsList() {
        if (timeZoneReplacementsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeZoneReplacements_);
        } else {
          return timeZoneReplacementsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public int getTimeZoneReplacementsCount() {
        if (timeZoneReplacementsBuilder_ == null) {
          return timeZoneReplacements_.size();
        } else {
          return timeZoneReplacementsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getTimeZoneReplacements(int index) {
        if (timeZoneReplacementsBuilder_ == null) {
          return timeZoneReplacements_.get(index);
        } else {
          return timeZoneReplacementsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder setTimeZoneReplacements(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement value) {
        if (timeZoneReplacementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.set(index, value);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder setTimeZoneReplacements(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder builderForValue) {
        if (timeZoneReplacementsBuilder_ == null) {
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder addTimeZoneReplacements(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement value) {
        if (timeZoneReplacementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.add(value);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder addTimeZoneReplacements(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement value) {
        if (timeZoneReplacementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.add(index, value);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder addTimeZoneReplacements(
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder builderForValue) {
        if (timeZoneReplacementsBuilder_ == null) {
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.add(builderForValue.build());
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder addTimeZoneReplacements(
          int index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder builderForValue) {
        if (timeZoneReplacementsBuilder_ == null) {
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder addAllTimeZoneReplacements(
          java.lang.Iterable<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement> values) {
        if (timeZoneReplacementsBuilder_ == null) {
          ensureTimeZoneReplacementsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeZoneReplacements_);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder clearTimeZoneReplacements() {
        if (timeZoneReplacementsBuilder_ == null) {
          timeZoneReplacements_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public Builder removeTimeZoneReplacements(int index) {
        if (timeZoneReplacementsBuilder_ == null) {
          ensureTimeZoneReplacementsIsMutable();
          timeZoneReplacements_.remove(index);
          onChanged();
        } else {
          timeZoneReplacementsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder getTimeZoneReplacementsBuilder(
          int index) {
        return getTimeZoneReplacementsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder getTimeZoneReplacementsOrBuilder(
          int index) {
        if (timeZoneReplacementsBuilder_ == null) {
          return timeZoneReplacements_.get(index);  } else {
          return timeZoneReplacementsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public java.util.List<? extends com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder> 
           getTimeZoneReplacementsOrBuilderList() {
        if (timeZoneReplacementsBuilder_ != null) {
          return timeZoneReplacementsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeZoneReplacements_);
        }
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder addTimeZoneReplacementsBuilder() {
        return getTimeZoneReplacementsFieldBuilder().addBuilder(
            com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.getDefaultInstance());
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder addTimeZoneReplacementsBuilder(
          int index) {
        return getTimeZoneReplacementsFieldBuilder().addBuilder(
            index, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.getDefaultInstance());
      }
      /**
       * <pre>
       * Replacements for time zones where the replaced time zone is not identical to the replacement
       * before some point in time. After that point in time, the two zones have been judged as
       * equivalent. e.g. "America/Boise" has the same rules as "America/Denver" after Sun, 03 Feb
       * 1974, so the two can be considered equivalent today, but not for dates before that.
       * </pre>
       *
       * <code>repeated .com.android.timezone.tzids.proto.TimeZoneReplacement timeZoneReplacements = 4;</code>
       */
      public java.util.List<com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder> 
           getTimeZoneReplacementsBuilderList() {
        return getTimeZoneReplacementsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder> 
          getTimeZoneReplacementsFieldBuilder() {
        if (timeZoneReplacementsBuilder_ == null) {
          timeZoneReplacementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder>(
                  timeZoneReplacements_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          timeZoneReplacements_ = null;
        }
        return timeZoneReplacementsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.timezone.tzids.proto.CountryMapping)
    }

    // @@protoc_insertion_point(class_scope:com.android.timezone.tzids.proto.CountryMapping)
    private static final com.android.timezone.tzids.proto.TzIdsProto.CountryMapping DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.timezone.tzids.proto.TzIdsProto.CountryMapping();
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CountryMapping>
        PARSER = new com.google.protobuf.AbstractParser<CountryMapping>() {
      @java.lang.Override
      public CountryMapping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CountryMapping> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CountryMapping> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.CountryMapping getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimeZoneLinkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.timezone.tzids.proto.TimeZoneLink)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return Whether the alternativeId field is set.
     */
    boolean hasAlternativeId();
    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return The alternativeId.
     */
    java.lang.String getAlternativeId();
    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return The bytes for alternativeId.
     */
    com.google.protobuf.ByteString
        getAlternativeIdBytes();

    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return Whether the preferredId field is set.
     */
    boolean hasPreferredId();
    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return The preferredId.
     */
    java.lang.String getPreferredId();
    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return The bytes for preferredId.
     */
    com.google.protobuf.ByteString
        getPreferredIdBytes();
  }
  /**
   * <pre>
   * An ID replacement when one time zone Olson ID is just direct synonym for another.
   * </pre>
   *
   * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneLink}
   */
  public static final class TimeZoneLink extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.timezone.tzids.proto.TimeZoneLink)
      TimeZoneLinkOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimeZoneLink.newBuilder() to construct.
    private TimeZoneLink(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimeZoneLink() {
      alternativeId_ = "";
      preferredId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimeZoneLink();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneLink_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder.class);
    }

    private int bitField0_;
    public static final int ALTERNATIVEID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object alternativeId_ = "";
    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return Whether the alternativeId field is set.
     */
    @java.lang.Override
    public boolean hasAlternativeId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return The alternativeId.
     */
    @java.lang.Override
    public java.lang.String getAlternativeId() {
      java.lang.Object ref = alternativeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          alternativeId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The alternative Olson ID. This will typically be an obsoleted Olson ID.
     * </pre>
     *
     * <code>required string alternativeId = 1;</code>
     * @return The bytes for alternativeId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAlternativeIdBytes() {
      java.lang.Object ref = alternativeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        alternativeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PREFERREDID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object preferredId_ = "";
    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return Whether the preferredId field is set.
     */
    @java.lang.Override
    public boolean hasPreferredId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return The preferredId.
     */
    @java.lang.Override
    public java.lang.String getPreferredId() {
      java.lang.Object ref = preferredId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          preferredId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
     * </pre>
     *
     * <code>required string preferredId = 2;</code>
     * @return The bytes for preferredId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPreferredIdBytes() {
      java.lang.Object ref = preferredId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        preferredId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAlternativeId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPreferredId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, alternativeId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, preferredId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, alternativeId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, preferredId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink)) {
        return super.equals(obj);
      }
      com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink other = (com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink) obj;

      if (hasAlternativeId() != other.hasAlternativeId()) return false;
      if (hasAlternativeId()) {
        if (!getAlternativeId()
            .equals(other.getAlternativeId())) return false;
      }
      if (hasPreferredId() != other.hasPreferredId()) return false;
      if (hasPreferredId()) {
        if (!getPreferredId()
            .equals(other.getPreferredId())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAlternativeId()) {
        hash = (37 * hash) + ALTERNATIVEID_FIELD_NUMBER;
        hash = (53 * hash) + getAlternativeId().hashCode();
      }
      if (hasPreferredId()) {
        hash = (37 * hash) + PREFERREDID_FIELD_NUMBER;
        hash = (53 * hash) + getPreferredId().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An ID replacement when one time zone Olson ID is just direct synonym for another.
     * </pre>
     *
     * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneLink}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.timezone.tzids.proto.TimeZoneLink)
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLinkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneLink_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.Builder.class);
      }

      // Construct using com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        alternativeId_ = "";
        preferredId_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getDefaultInstanceForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink build() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink buildPartial() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink result = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.alternativeId_ = alternativeId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.preferredId_ = preferredId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink) {
          return mergeFrom((com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink other) {
        if (other == com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink.getDefaultInstance()) return this;
        if (other.hasAlternativeId()) {
          alternativeId_ = other.alternativeId_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasPreferredId()) {
          preferredId_ = other.preferredId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasAlternativeId()) {
          return false;
        }
        if (!hasPreferredId()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                alternativeId_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                preferredId_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object alternativeId_ = "";
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @return Whether the alternativeId field is set.
       */
      public boolean hasAlternativeId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @return The alternativeId.
       */
      public java.lang.String getAlternativeId() {
        java.lang.Object ref = alternativeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            alternativeId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @return The bytes for alternativeId.
       */
      public com.google.protobuf.ByteString
          getAlternativeIdBytes() {
        java.lang.Object ref = alternativeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          alternativeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @param value The alternativeId to set.
       * @return This builder for chaining.
       */
      public Builder setAlternativeId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        alternativeId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAlternativeId() {
        alternativeId_ = getDefaultInstance().getAlternativeId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The alternative Olson ID. This will typically be an obsoleted Olson ID.
       * </pre>
       *
       * <code>required string alternativeId = 1;</code>
       * @param value The bytes for alternativeId to set.
       * @return This builder for chaining.
       */
      public Builder setAlternativeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        alternativeId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object preferredId_ = "";
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @return Whether the preferredId field is set.
       */
      public boolean hasPreferredId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @return The preferredId.
       */
      public java.lang.String getPreferredId() {
        java.lang.Object ref = preferredId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            preferredId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @return The bytes for preferredId.
       */
      public com.google.protobuf.ByteString
          getPreferredIdBytes() {
        java.lang.Object ref = preferredId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          preferredId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @param value The preferredId to set.
       * @return This builder for chaining.
       */
      public Builder setPreferredId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        preferredId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPreferredId() {
        preferredId_ = getDefaultInstance().getPreferredId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Android preferred Olson ID. This will typically be a newer / more correct Olson ID.
       * </pre>
       *
       * <code>required string preferredId = 2;</code>
       * @param value The bytes for preferredId to set.
       * @return This builder for chaining.
       */
      public Builder setPreferredIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        preferredId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.timezone.tzids.proto.TimeZoneLink)
    }

    // @@protoc_insertion_point(class_scope:com.android.timezone.tzids.proto.TimeZoneLink)
    private static final com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink();
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TimeZoneLink>
        PARSER = new com.google.protobuf.AbstractParser<TimeZoneLink>() {
      @java.lang.Override
      public TimeZoneLink parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimeZoneLink> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimeZoneLink> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneLink getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimeZoneReplacementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.timezone.tzids.proto.TimeZoneReplacement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return Whether the replacedId field is set.
     */
    boolean hasReplacedId();
    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return The replacedId.
     */
    java.lang.String getReplacedId();
    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return The bytes for replacedId.
     */
    com.google.protobuf.ByteString
        getReplacedIdBytes();

    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return Whether the replacementId field is set.
     */
    boolean hasReplacementId();
    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return The replacementId.
     */
    java.lang.String getReplacementId();
    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return The bytes for replacementId.
     */
    com.google.protobuf.ByteString
        getReplacementIdBytes();

    /**
     * <pre>
     * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
     * </pre>
     *
     * <code>required int64 fromMillis = 3;</code>
     * @return Whether the fromMillis field is set.
     */
    boolean hasFromMillis();
    /**
     * <pre>
     * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
     * </pre>
     *
     * <code>required int64 fromMillis = 3;</code>
     * @return The fromMillis.
     */
    long getFromMillis();
  }
  /**
   * <pre>
   * The functional replacement of one time zone ID by another after a point in time.
   * Computed by looking at offset behavior / zone metadata.
   * </pre>
   *
   * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneReplacement}
   */
  public static final class TimeZoneReplacement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.timezone.tzids.proto.TimeZoneReplacement)
      TimeZoneReplacementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimeZoneReplacement.newBuilder() to construct.
    private TimeZoneReplacement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimeZoneReplacement() {
      replacedId_ = "";
      replacementId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimeZoneReplacement();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder.class);
    }

    private int bitField0_;
    public static final int REPLACEDID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object replacedId_ = "";
    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return Whether the replacedId field is set.
     */
    @java.lang.Override
    public boolean hasReplacedId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return The replacedId.
     */
    @java.lang.Override
    public java.lang.String getReplacedId() {
      java.lang.Object ref = replacedId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          replacedId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The Olson ID that was replaced / ceased to be distinct.
     * </pre>
     *
     * <code>required string replacedId = 1;</code>
     * @return The bytes for replacedId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getReplacedIdBytes() {
      java.lang.Object ref = replacedId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        replacedId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLACEMENTID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object replacementId_ = "";
    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return Whether the replacementId field is set.
     */
    @java.lang.Override
    public boolean hasReplacementId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return The replacementId.
     */
    @java.lang.Override
    public java.lang.String getReplacementId() {
      java.lang.Object ref = replacementId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          replacementId_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
     * </pre>
     *
     * <code>required string replacementId = 2;</code>
     * @return The bytes for replacementId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getReplacementIdBytes() {
      java.lang.Object ref = replacementId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        replacementId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FROMMILLIS_FIELD_NUMBER = 3;
    private long fromMillis_ = 0L;
    /**
     * <pre>
     * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
     * </pre>
     *
     * <code>required int64 fromMillis = 3;</code>
     * @return Whether the fromMillis field is set.
     */
    @java.lang.Override
    public boolean hasFromMillis() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
     * </pre>
     *
     * <code>required int64 fromMillis = 3;</code>
     * @return The fromMillis.
     */
    @java.lang.Override
    public long getFromMillis() {
      return fromMillis_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasReplacedId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReplacementId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFromMillis()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, replacedId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, replacementId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt64(3, fromMillis_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, replacedId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, replacementId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, fromMillis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement)) {
        return super.equals(obj);
      }
      com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement other = (com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement) obj;

      if (hasReplacedId() != other.hasReplacedId()) return false;
      if (hasReplacedId()) {
        if (!getReplacedId()
            .equals(other.getReplacedId())) return false;
      }
      if (hasReplacementId() != other.hasReplacementId()) return false;
      if (hasReplacementId()) {
        if (!getReplacementId()
            .equals(other.getReplacementId())) return false;
      }
      if (hasFromMillis() != other.hasFromMillis()) return false;
      if (hasFromMillis()) {
        if (getFromMillis()
            != other.getFromMillis()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasReplacedId()) {
        hash = (37 * hash) + REPLACEDID_FIELD_NUMBER;
        hash = (53 * hash) + getReplacedId().hashCode();
      }
      if (hasReplacementId()) {
        hash = (37 * hash) + REPLACEMENTID_FIELD_NUMBER;
        hash = (53 * hash) + getReplacementId().hashCode();
      }
      if (hasFromMillis()) {
        hash = (37 * hash) + FROMMILLIS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFromMillis());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The functional replacement of one time zone ID by another after a point in time.
     * Computed by looking at offset behavior / zone metadata.
     * </pre>
     *
     * Protobuf type {@code com.android.timezone.tzids.proto.TimeZoneReplacement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.timezone.tzids.proto.TimeZoneReplacement)
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.class, com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.Builder.class);
      }

      // Construct using com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        replacedId_ = "";
        replacementId_ = "";
        fromMillis_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getDefaultInstanceForType() {
        return com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement build() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement buildPartial() {
        com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement result = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.replacedId_ = replacedId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.replacementId_ = replacementId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fromMillis_ = fromMillis_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement) {
          return mergeFrom((com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement other) {
        if (other == com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement.getDefaultInstance()) return this;
        if (other.hasReplacedId()) {
          replacedId_ = other.replacedId_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasReplacementId()) {
          replacementId_ = other.replacementId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasFromMillis()) {
          setFromMillis(other.getFromMillis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasReplacedId()) {
          return false;
        }
        if (!hasReplacementId()) {
          return false;
        }
        if (!hasFromMillis()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                replacedId_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                replacementId_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                fromMillis_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object replacedId_ = "";
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @return Whether the replacedId field is set.
       */
      public boolean hasReplacedId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @return The replacedId.
       */
      public java.lang.String getReplacedId() {
        java.lang.Object ref = replacedId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            replacedId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @return The bytes for replacedId.
       */
      public com.google.protobuf.ByteString
          getReplacedIdBytes() {
        java.lang.Object ref = replacedId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          replacedId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @param value The replacedId to set.
       * @return This builder for chaining.
       */
      public Builder setReplacedId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        replacedId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearReplacedId() {
        replacedId_ = getDefaultInstance().getReplacedId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Olson ID that was replaced / ceased to be distinct.
       * </pre>
       *
       * <code>required string replacedId = 1;</code>
       * @param value The bytes for replacedId to set.
       * @return This builder for chaining.
       */
      public Builder setReplacedIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        replacedId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object replacementId_ = "";
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @return Whether the replacementId field is set.
       */
      public boolean hasReplacementId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @return The replacementId.
       */
      public java.lang.String getReplacementId() {
        java.lang.Object ref = replacementId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            replacementId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @return The bytes for replacementId.
       */
      public com.google.protobuf.ByteString
          getReplacementIdBytes() {
        java.lang.Object ref = replacementId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          replacementId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @param value The replacementId to set.
       * @return This builder for chaining.
       */
      public Builder setReplacementId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        replacementId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearReplacementId() {
        replacementId_ = getDefaultInstance().getReplacementId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Olson ID that is better / to use in place of replacedId on Android after fromMillis.
       * </pre>
       *
       * <code>required string replacementId = 2;</code>
       * @param value The bytes for replacementId to set.
       * @return This builder for chaining.
       */
      public Builder setReplacementIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        replacementId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private long fromMillis_ ;
      /**
       * <pre>
       * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
       * </pre>
       *
       * <code>required int64 fromMillis = 3;</code>
       * @return Whether the fromMillis field is set.
       */
      @java.lang.Override
      public boolean hasFromMillis() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
       * </pre>
       *
       * <code>required int64 fromMillis = 3;</code>
       * @return The fromMillis.
       */
      @java.lang.Override
      public long getFromMillis() {
        return fromMillis_;
      }
      /**
       * <pre>
       * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
       * </pre>
       *
       * <code>required int64 fromMillis = 3;</code>
       * @param value The fromMillis to set.
       * @return This builder for chaining.
       */
      public Builder setFromMillis(long value) {

        fromMillis_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
       * </pre>
       *
       * <code>required int64 fromMillis = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFromMillis() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fromMillis_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.timezone.tzids.proto.TimeZoneReplacement)
    }

    // @@protoc_insertion_point(class_scope:com.android.timezone.tzids.proto.TimeZoneReplacement)
    private static final com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement();
    }

    public static com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TimeZoneReplacement>
        PARSER = new com.google.protobuf.AbstractParser<TimeZoneReplacement>() {
      @java.lang.Override
      public TimeZoneReplacement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimeZoneReplacement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimeZoneReplacement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.timezone.tzids.proto.TzIdsProto.TimeZoneReplacement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_timezone_tzids_proto_TimeZoneIds_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_timezone_tzids_proto_CountryMapping_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_timezone_tzids_proto_TimeZoneLink_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022tz_ids_proto.proto\022 com.android.timezo" +
      "ne.tzids.proto\"m\n\013TimeZoneIds\022\023\n\013ianaVer" +
      "sion\030\001 \001(\t\022I\n\017countryMappings\030\002 \003(\01320.co" +
      "m.android.timezone.tzids.proto.CountryMa" +
      "pping\"\322\001\n\016CountryMapping\022\017\n\007isoCode\030\001 \002(" +
      "\t\022\023\n\013timeZoneIds\030\002 \003(\t\022E\n\rtimeZoneLinks\030" +
      "\003 \003(\0132..com.android.timezone.tzids.proto" +
      ".TimeZoneLink\022S\n\024timeZoneReplacements\030\004 " +
      "\003(\01325.com.android.timezone.tzids.proto.T" +
      "imeZoneReplacement\":\n\014TimeZoneLink\022\025\n\ral" +
      "ternativeId\030\001 \002(\t\022\023\n\013preferredId\030\002 \002(\t\"T" +
      "\n\023TimeZoneReplacement\022\022\n\nreplacedId\030\001 \002(" +
      "\t\022\025\n\rreplacementId\030\002 \002(\t\022\022\n\nfromMillis\030\003" +
      " \002(\003B$\n com.android.timezone.tzids.proto" +
      "P\000"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_android_timezone_tzids_proto_TimeZoneIds_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_timezone_tzids_proto_TimeZoneIds_descriptor,
        new java.lang.String[] { "IanaVersion", "CountryMappings", });
    internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_android_timezone_tzids_proto_CountryMapping_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_timezone_tzids_proto_CountryMapping_descriptor,
        new java.lang.String[] { "IsoCode", "TimeZoneIds", "TimeZoneLinks", "TimeZoneReplacements", });
    internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_android_timezone_tzids_proto_TimeZoneLink_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_timezone_tzids_proto_TimeZoneLink_descriptor,
        new java.lang.String[] { "AlternativeId", "PreferredId", });
    internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_timezone_tzids_proto_TimeZoneReplacement_descriptor,
        new java.lang.String[] { "ReplacedId", "ReplacementId", "FromMillis", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
